#version 450

#define N_THREADS 256

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };
layout(binding = 3) readonly uniform configBuffer {
    uint nHeads;
    uint nHeads0;
    uint nKvHeads;
    uint headSize;
    uint seqLen;
    uint qSliceD0;
    uint kvDim0;
    // uint positionPipeIndex;
    // uint queryBufferIndex;
    // uint keyCacheBufferIndex;
    // uint valueCacheBufferIndex;
    // uint attBufferIndex;
};
layout(binding = 4) readonly buffer positionsBuffer { float positions[]; };
layout(binding = 5) readonly buffer queryBuffer { float query[]; };
layout(binding = 6) readonly buffer keyCacheBuffer { float keyCache[]; };
layout(binding = 7) readonly buffer valueCacheBuffer { float valueCache[]; };
layout(binding = 8) buffer attBufferBuffer { float att[]; };

shared BatchInfo sharedInfo;
shared uint position;

void main() {
    const uint threadIndex = gl_LocalInvocationID.x;
    const uint batchIndex = gl_GlobalInvocationID.y;
    const uint kvMul = nHeads / nKvHeads;
    const float headSizeRoot = sqrt(float(headSize));

    if (threadIndex == 0) {
        sharedInfo = infos[batchIndex];
        position = uint(positions[batchIndex]);
    }

    barrier();
    memoryBarrierShared();

    for (uint h = threadIndex; h < nHeads0; h += N_THREADS) {
        const uint qOffset = batchIndex * qSliceD0 + h * headSize;
        const uint headIndex = h / kvMul;
        const uint kvOffset = headIndex * headSize;
        const uint attOffset = h * seqLen;
        const uint yOffset = sharedInfo.outputOffset + h * headSize;

        for (uint p = 0; p <= position; p++) {
            float score = 0.0;
            const uint kOffset = kvOffset + p * kvDim0;
            for (uint i = 0; i < headSize; i++) {
                score += query[qOffset + i] * keyCache[kOffset + i];
            }
            att[attOffset + p] = score / headSizeRoot;
        }

        // softmax
        float maxScore = att[attOffset];
        for (uint p = 1; p <= position; p++) {
            maxScore = max(maxScore, att[attOffset + p]);
        }

        float sum = 0.0;
        for (uint p = 0; p <= position; p++) {
            float v = exp(att[attOffset + p] - maxScore);
            att[attOffset + p] = v;
            sum += v;
        }

        for (uint p = 0; p <= position; p++) {
            att[attOffset + p] /= sum;
        }

        // return
        for (uint i = 0; i < headSize; i++) {
            y[yOffset + i] = 0.0;
        }

        for (uint p = 0; p <= position; p++) {
            const float a = att[attOffset + p];
            const uint vOffset = kvOffset + p * kvDim0;
            for (uint i = 0; i < headSize; i++) {
                float v = valueCache[vOffset + i];
                y[yOffset + i] += v * a;
            }
        }
    }
}
