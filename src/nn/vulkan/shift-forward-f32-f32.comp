#version 450

#define N_THREADS 256
#define N_BATCHES 32

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly uniform batchInfosBuffer { BatchInfo infos[N_BATCHES]; };
layout(binding = 3) readonly uniform configBuffer {
    uint indexPipeIndex;
};
layout(binding = 4) readonly buffer indexBuffer { float indexes[]; };

shared uint sharedIndex;

void main() {
    const uint threadIndex = gl_LocalInvocationID.x;
    const uint nWorkGroups = gl_NumWorkGroups.z;
    const uint batchIndex = gl_WorkGroupID.y;
    const uint workGroupIndex = gl_WorkGroupID.z;

    if (threadIndex == 0) {
        sharedIndex = uint(indexes[batchIndex]);
    }

    barrier();

    BatchInfo info = infos[batchIndex];
    const uint slice = info.inputSizeX / nWorkGroups;
    const uint rest = info.inputSizeX % nWorkGroups;
    const uint offset = workGroupIndex * slice + min(rest, workGroupIndex);

    const uint index = sharedIndex;
    const uint dim = slice + (workGroupIndex < rest ? 1 : 0);;
    const uint xOffset = info.inputOffset + offset;;
    const uint yOffset = index * info.inputSizeX + offset;

    for (uint i = threadIndex; i < dim; i += N_THREADS) {
        y[yOffset + i] = x[xOffset + i];
    }
}
