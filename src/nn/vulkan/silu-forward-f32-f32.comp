#version 450

#define N_THREADS 256

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };

shared uint sharedDim;
shared uint sharedXOffset;
shared uint sharedYOffset;

void main() {
    const uint threadIndex = gl_LocalInvocationID.x;
    const uint batchIndex = gl_GlobalInvocationID.y;

    if (threadIndex == 0) {
        const uint nWorkGroups = gl_NumWorkGroups.z;
        const uint batchIndex = gl_WorkGroupID.y;
        const uint workGroupIndex = gl_WorkGroupID.z;

        const BatchInfo info = infos[batchIndex];
        sharedDim = info.inputSizeX / nWorkGroups;
        sharedXOffset = info.inputOffset + sharedDim * workGroupIndex;
        sharedYOffset = info.outputOffset + sharedDim * workGroupIndex;
    }

    barrier();
    memoryBarrierShared();

    const uint dim = sharedDim;
    const uint xOffset = sharedXOffset;
    const uint yOffset = sharedYOffset;

    for (uint i = threadIndex; i < dim; i += N_THREADS) {
        float v = x[xOffset + i];
        y[yOffset + i] = v / (1.0 + exp(-v));
    }
}
