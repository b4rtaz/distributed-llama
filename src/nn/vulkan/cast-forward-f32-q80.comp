#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#define Q80_BLOCK_SIZE 32
#define N_THREADS 256
#define N_BATCHES 32

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset; // number of Q80 blocks
    uint outputSizeX; // number of Q80 blocks
};

struct BlockQ80 {
    float16_t d;
    int8_t qs[Q80_BLOCK_SIZE];
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { BlockQ80 y[]; };
layout(binding = 2) readonly uniform batchInfosBuffer { BatchInfo infos[N_BATCHES]; };

void main() {
    const uint threadIndex = gl_LocalInvocationID.x;
    const uint nWorkGroups = gl_NumWorkGroups.z;
    const uint batchIndex = gl_WorkGroupID.y;
    const uint workGroupIndex = gl_WorkGroupID.z;

    const BatchInfo info = infos[batchIndex];
    const uint slice = info.outputSizeX / nWorkGroups;
    const uint rest = info.outputSizeX % nWorkGroups;
    const uint yStart = workGroupIndex * slice + min(rest, workGroupIndex);
    const uint yEnd = yStart + slice + (workGroupIndex < rest ? 1 : 0);
    const uint xOffset = info.inputOffset;
    const uint yOffset = info.outputOffset;

    for (uint i = yStart + threadIndex; i < yEnd; i += N_THREADS) {
        const uint xiOffset = xOffset + i * Q80_BLOCK_SIZE;
        const uint yiOffset = yOffset + i;

        float amax = 0.0;
        [[unroll]] for (uint j = 0; j < Q80_BLOCK_SIZE; ++j) {
            const float v = abs(x[xiOffset + j]);
            amax = max(amax, v);
        }

        const float d = amax / 127.0f;
        const float id = d != 0.0f ? 1.0f / d : 0.0f;

        y[yiOffset].d = float16_t(d);

        [[unroll]] for (uint j = 0; j < Q80_BLOCK_SIZE; ++j) {
            const float v = x[xiOffset + j];
            y[yiOffset].qs[j] = int8_t(clamp(round(v * id), -127.0f, 127.0f));
        }
    }
}
