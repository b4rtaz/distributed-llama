#version 450

#define N_THREADS 32

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };
layout(binding = 3) readonly buffer weightBuffer { float weight[]; };

shared BatchInfo sharedInfo;

void main() {
    const uint threadIndex = gl_LocalInvocationID.x;
    const uint batchIndex = gl_GlobalInvocationID.y;

    if (threadIndex == 0) {
        sharedInfo = infos[batchIndex];
    }

    barrier();
    memoryBarrierShared();

    const uint outputSizeX = sharedInfo.outputSizeX;
    const uint xOffset = sharedInfo.inputOffset;
    const uint yOffset = sharedInfo.outputOffset;

    for (uint i = threadIndex; i < outputSizeX; i += N_THREADS) {
        float sum = 0.0;
        const uint wOffset = i * sharedInfo.inputSizeX;
        for (uint j = 0; j < sharedInfo.inputSizeX; j++) {
            sum += x[xOffset + j] * weight[wOffset + j];
        }
        y[yOffset + i] = sum;
    }
}
