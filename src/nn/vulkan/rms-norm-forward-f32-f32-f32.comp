#version 450

#define N_THREADS 256

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };
layout(binding = 3) readonly buffer weightBuffer { float weight[]; };
layout(binding = 4) readonly uniform configBuffer {
    uint invRmsBufferIndex; // not used
};
layout(binding = 5) readonly buffer invRmsBuffer { float invRms[]; };

shared BatchInfo sharedInfo;
shared float s;

void main() {
    const uint threadIndex = uint(gl_LocalInvocationID.x);
    const uint batchIndex = uint(gl_GlobalInvocationID.y);

    if (threadIndex == 0) {
        sharedInfo = infos[batchIndex];
        s = invRms[batchIndex];
    }

    barrier();
    memoryBarrierShared();

    const uint inputSizeX = sharedInfo.inputSizeX;
    const uint xOffset = sharedInfo.inputOffset;
    const uint yOffset = sharedInfo.outputOffset;

    for (uint i = threadIndex; i < inputSizeX; i += N_THREADS) {
        y[yOffset + i] = (x[xOffset + i] * s) * weight[i];
    }
}
