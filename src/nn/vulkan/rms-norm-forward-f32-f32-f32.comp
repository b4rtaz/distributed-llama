#version 450

#define N_THREADS 64

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };
layout(binding = 3) readonly buffer weightBuffer { float weight[]; };
layout(binding = 4) readonly uniform configBuffer {
    uint invRmsBufferIndex; // not used
};
layout(binding = 5) readonly buffer invRmsBuffer { float invRms[]; };

shared uint sharedDim;
shared uint sharedDimOffset;
shared uint sharedXOffset;
shared uint sharedYOffset;
shared float sharedS;

void main() {
    const uint threadIndex = uint(gl_LocalInvocationID.x);

    if (threadIndex == 0) {
        const uint nWorkGroups = gl_NumWorkGroups.z;
        const uint batchIndex = gl_WorkGroupID.y;
        const uint workGroupIndex = gl_WorkGroupID.z;

        const BatchInfo info = infos[batchIndex];
        sharedDim = info.inputSizeX / nWorkGroups;
        sharedDimOffset = sharedDim * workGroupIndex;
        sharedXOffset = info.inputOffset + sharedDimOffset;
        sharedYOffset = info.outputOffset + sharedDimOffset;
        sharedS = invRms[batchIndex];
    }

    barrier();
    memoryBarrierShared();

    const uint dim = sharedDim;
    const uint dimOffset = sharedDimOffset;
    const uint xOffset = sharedXOffset;
    const uint yOffset = sharedYOffset;
    const float s = sharedS;

    for (uint i = threadIndex; i < dim; i += N_THREADS) {
        y[yOffset + i] = (x[xOffset + i] * s) * weight[i + dimOffset];
    }
}
