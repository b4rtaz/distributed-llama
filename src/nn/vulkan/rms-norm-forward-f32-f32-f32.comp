#version 450

#define N_THREADS 32

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };
layout(binding = 3) readonly buffer weightBuffer { float weight[]; };
layout(binding = 4) readonly uniform configBuffer {
    uint invRmsBufferIndex;
};
layout(binding = 5) readonly buffer invRmsBuffer { float invRms[]; };

void main() {
    const uint threadIndex = uint(gl_LocalInvocationID.x);
    const uint batchIndex = uint(gl_GlobalInvocationID.y);

    const uint inputSizeX = infos[batchIndex].inputSizeX;
    const uint offset = infos[batchIndex].inputOffset;
    const uint slice = inputSizeX / N_THREADS;
    const uint rest = inputSizeX % N_THREADS;
    const uint start = threadIndex * slice + (threadIndex < rest ? threadIndex : rest);
    const uint end = start + slice + (threadIndex < rest ? 1 : 0);

    const float s = invRms[batchIndex];

    for (uint i = start; i < end; i++) {
        uint j = offset + i;
        y[j] = (x[j] * s) * weight[i];
    }
}
