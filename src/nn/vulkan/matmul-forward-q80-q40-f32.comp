#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#define Q80_BLOCK_SIZE 32
#define Q40_BLOCK_SIZE 32
#define N_THREADS 128

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

struct BlockQ80 {
    float16_t d;
    int8_t qs[Q80_BLOCK_SIZE];
};

struct BlockQ40 {
    float16_t d;
    uint8_t qs[Q40_BLOCK_SIZE / 2];
};

layout(binding = 0) readonly buffer inputBuffer { BlockQ80 x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };
layout(binding = 3) readonly buffer weightBuffer { BlockQ40 weight[]; };

shared uint sharedStart;
shared uint sharedEnd;
shared BatchInfo sharedInfo;

void main() {
    const uint threadIndex = gl_LocalInvocationID.x;

    if (threadIndex == 0) {
        const uint nWorkGroups = gl_NumWorkGroups.z;
        const uint batchIndex = gl_WorkGroupID.y;
        const uint workGroupIndex = gl_WorkGroupID.z;

        const BatchInfo info = infos[batchIndex];

        const uint ySlice = info.outputSizeX / nWorkGroups;
        const uint yRest = info.outputSizeX % nWorkGroups;
        sharedStart = workGroupIndex * ySlice + (workGroupIndex < yRest ? workGroupIndex : yRest);
        sharedEnd = sharedStart + ySlice + (workGroupIndex < yRest ? 1 : 0);
        sharedInfo = info;
    }

    barrier();
    memoryBarrierShared();

    const uint end = sharedEnd;
    const uint inputOffset = sharedInfo.inputOffset;
    const uint inputSizeX = sharedInfo.inputSizeX;
    const uint outputOffset = sharedInfo.outputOffset;

    for (uint d = sharedStart + threadIndex; d < end; d += N_THREADS) {
        float16_t sum = float16_t(0.0f);

        for (uint i = 0; i < inputSizeX; i++) {
            const BlockQ80 xi = x[inputOffset + i];
            const BlockQ40 wi = weight[d * inputSizeX + i];

            float16_t s = float16_t(0.0f);
            [[unroll]] for (uint j = 0; j < Q40_BLOCK_SIZE / 2; j++) {
                const float16_t x0 = float16_t(xi.qs[j]);
                const float16_t x1 = float16_t(xi.qs[j + Q80_BLOCK_SIZE / 2]);

                const uint8_t wq = wi.qs[j];
                const float16_t w0 = float16_t(wq & 0xF) - float16_t(8.0f);
                const float16_t w1 = float16_t(wq >>  4) - float16_t(8.0f);
                s += x0 * w0 + x1 * w1;
            }
            sum += s * xi.d * wi.d;
        }

        y[outputOffset + d] = float(sum);
    }
}
