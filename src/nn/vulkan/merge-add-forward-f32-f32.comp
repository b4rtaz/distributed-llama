#version 450

#extension GL_EXT_control_flow_attributes : enable

#define N_THREADS 32

layout(local_size_x = N_THREADS, local_size_y = 1, local_size_z = 1) in;

struct BatchInfo {
    uint inputOffset;
    uint inputSizeX;
    uint outputOffset;
    uint outputSizeX;
};

layout(binding = 0) readonly buffer inputBuffer { float x[]; };
layout(binding = 1) writeonly buffer outputBuffer { float y[]; };
layout(binding = 2) readonly buffer batchInfosBuffer { BatchInfo infos[]; };

void main() {
    const uint threadIndex = uint(gl_LocalInvocationID.x);
    const uint batchIndex = uint(gl_GlobalInvocationID.y);

    const uint inputSizeX = infos[batchIndex].inputSizeX;
    const uint inputOffset = infos[batchIndex].inputOffset;
    const uint outputOffset = infos[batchIndex].outputOffset;
    const uint outputSizeX = infos[batchIndex].outputSizeX;
    const uint nNodes = inputSizeX / outputSizeX;

    const uint slice = outputSizeX / N_THREADS;
    const uint rest = outputSizeX % N_THREADS;
    const uint start = threadIndex * slice + (threadIndex < rest ? threadIndex : rest);
    const uint end = start + slice + (threadIndex < rest ? 1 : 0);

    for (uint i = start; i < end; i++) {
        float sum = 0.0;
        const uint iOffset = inputOffset + i;
        const uint oOffset = outputOffset + i;
        for (uint n = 0; n < nNodes; n++) {
            sum += x[n * outputSizeX + iOffset];
        }
        y[oOffset] += sum;
    }
}
